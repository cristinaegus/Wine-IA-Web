#!/usr/bin/env python3
"""
Entrenamiento de Modelo de ML con Datos Completos de Vivino
Script para entrenar un modelo mejorado con todos los datos de scraping
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
import joblib
import os
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

class ModeloVinoCompleto:
    """Modelo completo de clasificaci√≥n de vinos con datos de Vivino"""
    
    def __init__(self):
        self.modelo = None
        self.scaler = StandardScaler()
        self.label_encoders = {}
        self.caracteristicas = []
        self.clases_calidad = []
        
    def cargar_datos_completos(self, archivo_csv):
        """Carga y procesa los datos completos del scraping"""
        print("üìä Cargando datos completos de Vivino...")
        
        try:
            # Cargar datos
            df = pd.read_csv(archivo_csv, encoding='utf-8')
            print(f"‚úÖ Datos cargados: {len(df)} registros")
            
            # Mostrar informaci√≥n b√°sica
            print(f"üìä Columnas disponibles: {list(df.columns)}")
            print(f"üìä Memoria utilizada: {df.memory_usage(deep=True).sum() / 1024**2:.2f} MB")
            
            return df
            
        except Exception as e:
            print(f"‚ùå Error cargando datos: {e}")
            return None
    
    def limpiar_datos(self, df):
        """Limpia y prepara los datos para el entrenamiento"""
        print("üßπ Limpiando y preparando datos...")
        
        # Eliminar duplicados por URL para tener vinos √∫nicos
        df_original_size = len(df)
        df = df.drop_duplicates(subset=['url'], keep='first')
        duplicados_eliminados = df_original_size - len(df)
        print(f"üóëÔ∏è Duplicados eliminados: {duplicados_eliminados}")
        print(f"‚úÖ Vinos √∫nicos: {len(df)}")
        
        # Limpiar valores nulos en columnas cr√≠ticas
        columnas_criticas = ['precio_eur', 'rating', 'a√±o', 'region', 'bodega']
        for col in columnas_criticas:
            if col in df.columns:
                antes = len(df)
                df = df.dropna(subset=[col])
                despues = len(df)
                if antes != despues:
                    print(f"   {col}: eliminados {antes-despues} registros con valores nulos")
        
        # Normalizar regi√≥n (algunos est√°n como 'Espa√±a' gen√©rico)
        if 'region' in df.columns:
            # Mapear regiones gen√©ricas a espec√≠ficas bas√°ndose en bodega
            df['region'] = df['region'].fillna('Espa√±a')
            
            # Crear mapeo de regiones m√°s espec√≠fico
            mapeo_regiones = {
                'Espa√±a': 'Otras Regiones',
                'Campo de Borja': 'Arag√≥n - Campo de Borja',
                'Calatayud': 'Arag√≥n - Calatayud',
                'Madrid': 'Madrid',
                'Terra Alta': 'Catalu√±a - Terra Alta',
                'Castilla y Le√≥n': 'Castilla y Le√≥n',
                'Arag√≥n': 'Arag√≥n - General',
                'Navarra': 'Navarra',
                'Empord√†': 'Catalu√±a - Empord√†',
                'Valdejal√≥n': 'Arag√≥n - Valdejal√≥n',
                'Catalu√±a': 'Catalu√±a - General',
                'Cari√±ena': 'Arag√≥n - Cari√±ena',
                'Somontano': 'Arag√≥n - Somontano',
                'Pened√®s': 'Catalu√±a - Pened√®s',
                'Costers del Segre': 'Catalu√±a - Costers del Segre'
            }
            
            df['region_especifica'] = df['region'].map(mapeo_regiones).fillna(df['region'])
        
        # Normalizar categor√≠as de calidad
        if 'categoria_calidad' in df.columns:
            df['categoria_calidad'] = df['categoria_calidad'].fillna('Standard')
            
            # Mapear categor√≠as similares
            mapeo_calidad = {
                'Great Value': 'Excellent Value',
                'Good Value': 'Good Value',
                'Amazing Value': 'Excellent Value',
                'Best Value': 'Excellent Value',
                'Excellent Value': 'Excellent Value',
                'Outstanding Value': 'Excellent Value',
                'Cosecha m√°s antigua': 'Vintage',
                'Premium': 'Premium',
                'Limited Edition': 'Premium',
                'Organic': 'Specialty',
                'Top Rated': 'Premium',
                'Critics Choice': 'Premium'
            }
            
            df['categoria_calidad_normalizada'] = df['categoria_calidad'].map(mapeo_calidad).fillna('Standard')
        
        # Crear caracter√≠sticas derivadas
        if 'a√±o' in df.columns:
            df['a√±o'] = df['a√±o'].astype(int)
            df['antiguedad'] = 2025 - df['a√±o']
            df['epoca'] = pd.cut(df['a√±o'], 
                               bins=[1990, 2000, 2010, 2015, 2020, 2025],
                               labels=['Cl√°sicos', 'Millennium', 'D√©cada 2010', 'Modernos', 'Recientes'])
        
        # Crear rangos de precio
        if 'precio_eur' in df.columns:
            df['rango_precio'] = pd.cut(df['precio_eur'],
                                      bins=[0, 15, 25, 40, 60, 100],
                                      labels=['Econ√≥mico', 'Medio', 'Premium', 'Lujo', 'Ultra-Premium'])
        
        # Crear rangos de rating
        if 'rating' in df.columns:
            df['rango_rating'] = pd.cut(df['rating'],
                                      bins=[0, 4.0, 4.2, 4.4, 5.0],
                                      labels=['Bueno', 'Muy Bueno', 'Excelente', 'Excepcional'])
        
        # Extraer caracter√≠sticas de bodega
        if 'bodega' in df.columns:
            # Simplificar nombres de bodega (primeras dos palabras)
            df['bodega_simplificada'] = df['bodega'].str.split().str[:2].str.join(' ')
            df['bodega_simplificada'] = df['bodega_simplificada'].str.replace(r'[^\w\s]', '', regex=True)
        
        print(f"‚úÖ Datos limpios: {len(df)} vinos √∫nicos")
        return df
    
    def ingenieria_caracteristicas(self, df):
        """Aplica ingenier√≠a de caracter√≠sticas avanzada"""
        print("üîß Aplicando ingenier√≠a de caracter√≠sticas...")
        
        # Caracter√≠sticas num√©ricas
        caracteristicas_numericas = []
        
        if 'precio_eur' in df.columns:
            caracteristicas_numericas.append('precio_eur')
            # Log del precio para normalizar distribuci√≥n
            df['log_precio'] = np.log1p(df['precio_eur'])
            caracteristicas_numericas.append('log_precio')
        
        if 'rating' in df.columns:
            caracteristicas_numericas.append('rating')
            # Rating normalizado
            df['rating_normalizado'] = (df['rating'] - df['rating'].min()) / (df['rating'].max() - df['rating'].min())
            caracteristicas_numericas.append('rating_normalizado')
        
        if 'a√±o' in df.columns:
            caracteristicas_numericas.extend(['a√±o', 'antiguedad'])
        
        if 'num_reviews' in df.columns:
            df['num_reviews'] = df['num_reviews'].fillna(0)
            caracteristicas_numericas.append('num_reviews')
            # Log de reviews
            df['log_reviews'] = np.log1p(df['num_reviews'])
            caracteristicas_numericas.append('log_reviews')
        
        # Caracter√≠sticas categ√≥ricas
        caracteristicas_categoricas = []
        
        for col in ['region_especifica', 'rango_precio', 'rango_rating', 'epoca', 'bodega_simplificada']:
            if col in df.columns:
                caracteristicas_categoricas.append(col)
        
        # Codificar caracter√≠sticas categ√≥ricas
        for col in caracteristicas_categoricas:
            le = LabelEncoder()
            df[f'{col}_encoded'] = le.fit_transform(df[col].astype(str))
            self.label_encoders[col] = le
            caracteristicas_numericas.append(f'{col}_encoded')
        
        # Interacciones entre caracter√≠sticas
        if 'precio_eur' in df.columns and 'rating' in df.columns:
            df['precio_rating_ratio'] = df['precio_eur'] / df['rating']
            caracteristicas_numericas.append('precio_rating_ratio')
        
        if 'precio_eur' in df.columns and 'antiguedad' in df.columns:
            df['precio_por_a√±o'] = df['precio_eur'] / (df['antiguedad'] + 1)
            caracteristicas_numericas.append('precio_por_a√±o')
        
        self.caracteristicas = caracteristicas_numericas
        print(f"‚úÖ Caracter√≠sticas creadas: {len(self.caracteristicas)}")
        print(f"üìä Lista de caracter√≠sticas: {self.caracteristicas}")
        
        return df
    
    def definir_variable_objetivo(self, df):
        """Define la variable objetivo para la clasificaci√≥n"""
        print("üéØ Definiendo variable objetivo...")
        
        # Crear una variable objetivo basada en m√∫ltiples factores
        # Combinar rating, precio y categor√≠a de calidad
        
        # Base: categor√≠a de rating
        df['calidad_objetivo'] = df['rango_rating'].astype(str)
        
        # Ajustar por categor√≠a de calidad si existe
        if 'categoria_calidad_normalizada' in df.columns:
            # Promover vinos con categor√≠as especiales
            mask_premium = df['categoria_calidad_normalizada'].isin(['Premium', 'Excellent Value'])
            df.loc[mask_premium & (df['rango_rating'] == 'Muy Bueno'), 'calidad_objetivo'] = 'Excelente'
            
            mask_specialty = df['categoria_calidad_normalizada'].isin(['Vintage', 'Specialty'])
            df.loc[mask_specialty & (df['rango_rating'].isin(['Muy Bueno', 'Excelente'])), 'calidad_objetivo'] = 'Excepcional'
        
        # Codificar variable objetivo
        le_objetivo = LabelEncoder()
        df['calidad_numerica'] = le_objetivo.fit_transform(df['calidad_objetivo'])
        self.label_encoders['objetivo'] = le_objetivo
        self.clases_calidad = le_objetivo.classes_
        
        print(f"‚úÖ Clases de calidad definidas: {self.clases_calidad}")
        print(f"üìä Distribuci√≥n de clases:")
        distribucion = df['calidad_objetivo'].value_counts()
        for clase, count in distribucion.items():
            porcentaje = count / len(df) * 100
            print(f"   {clase}: {count} vinos ({porcentaje:.1f}%)")
        
        return df
    
    def entrenar_modelo(self, df):
        """Entrena el modelo de clasificaci√≥n"""
        print("üöÄ Entrenando modelo de clasificaci√≥n...")
        
        # Preparar datos
        X = df[self.caracteristicas].fillna(0)
        y = df['calidad_numerica']
        
        print(f"üìä Caracter√≠sticas: {X.shape[1]}")
        print(f"üìä Muestras: {X.shape[0]}")
        
        # Escalar caracter√≠sticas num√©ricas
        X_scaled = self.scaler.fit_transform(X)
        
        # Divisi√≥n de datos
        X_train, X_test, y_train, y_test = train_test_split(
            X_scaled, y, test_size=0.2, random_state=42, stratify=y
        )
        
        print(f"üìä Datos de entrenamiento: {X_train.shape[0]}")
        print(f"üìä Datos de prueba: {X_test.shape[0]}")
        
        # B√∫squeda de hiperpar√°metros
        print("üîç Optimizando hiperpar√°metros...")
        
        param_grid = {
            'n_estimators': [100, 200, 300],
            'max_depth': [10, 15, 20, None],
            'min_samples_split': [2, 5, 10],
            'min_samples_leaf': [1, 2, 4],
            'max_features': ['sqrt', 'log2', None]
        }
        
        rf_base = RandomForestClassifier(random_state=42, n_jobs=-1)
        
        # Usar validaci√≥n cruzada para encontrar mejores par√°metros
        grid_search = GridSearchCV(
            rf_base, param_grid, cv=5, scoring='accuracy', n_jobs=-1, verbose=1
        )
        
        grid_search.fit(X_train, y_train)
        
        print(f"‚úÖ Mejores par√°metros: {grid_search.best_params_}")
        print(f"‚úÖ Mejor score CV: {grid_search.best_score_:.4f}")
        
        # Entrenar modelo final
        self.modelo = grid_search.best_estimator_
        
        # Evaluar en datos de prueba
        y_pred = self.modelo.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)
        
        print(f"‚úÖ Accuracy en prueba: {accuracy:.4f}")
        print(f"‚úÖ Accuracy en prueba: {accuracy*100:.2f}%")
        
        # Reporte detallado
        print("\nüìä REPORTE DE CLASIFICACI√ìN:")
        print(classification_report(y_test, y_pred, target_names=self.clases_calidad))
        
        # Importancia de caracter√≠sticas
        print("\nüîç IMPORTANCIA DE CARACTER√çSTICAS:")
        importancias = self.modelo.feature_importances_
        for i, importancia in enumerate(importancias):
            if importancia > 0.05:  # Solo mostrar caracter√≠sticas importantes
                print(f"   {self.caracteristicas[i]}: {importancia:.4f}")
        
        return accuracy
    
    def guardar_modelo(self):
        """Guarda el modelo entrenado y componentes"""
        print("üíæ Guardando modelo...")
        
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            
            # Crear carpeta static si no existe
            if not os.path.exists('static'):
                os.makedirs('static')
            
            # Guardar modelo
            modelo_path = f'static/wine_model_completo_{timestamp}.pkl'
            joblib.dump(self.modelo, modelo_path)
            
            # Guardar scaler
            scaler_path = f'static/wine_scaler_completo_{timestamp}.pkl'
            joblib.dump(self.scaler, scaler_path)
            
            # Guardar informaci√≥n del modelo
            info_modelo = {
                'caracteristicas': self.caracteristicas,
                'label_encoders': self.label_encoders,
                'clases_calidad': self.clases_calidad.tolist(),
                'timestamp': timestamp,
                'version': 'completa'
            }
            
            info_path = f'static/model_info_completo_{timestamp}.pkl'
            joblib.dump(info_modelo, info_path)
            
            # Actualizar archivos principales (para compatibilidad)
            joblib.dump(self.modelo, 'static/wine_model.pkl')
            joblib.dump(self.scaler, 'static/wine_scaler.pkl')
            joblib.dump(info_modelo, 'static/model_info.pkl')
            
            print(f"‚úÖ Modelo guardado:")
            print(f"   - Modelo: {modelo_path}")
            print(f"   - Scaler: {scaler_path}")
            print(f"   - Info: {info_path}")
            print(f"‚úÖ Archivos principales actualizados para compatibilidad")
            
        except Exception as e:
            print(f"‚ùå Error guardando modelo: {e}")
    
    def entrenar_modelo_completo(self, archivo_csv):
        """Proceso completo de entrenamiento"""
        print("üç∑ ENTRENAMIENTO COMPLETO DE MODELO DE VINOS - VIVINO")
        print("=" * 60)
        
        # Cargar datos
        df = self.cargar_datos_completos(archivo_csv)
        if df is None:
            return False
        
        # Limpiar datos
        df = self.limpiar_datos(df)
        
        # Ingenier√≠a de caracter√≠sticas
        df = self.ingenieria_caracteristicas(df)
        
        # Definir variable objetivo
        df = self.definir_variable_objetivo(df)
        
        # Entrenar modelo
        accuracy = self.entrenar_modelo(df)
        
        # Guardar modelo
        self.guardar_modelo()
        
        print(f"\n‚úÖ ENTRENAMIENTO COMPLETADO")
        print(f"üéØ Accuracy final: {accuracy*100:.2f}%")
        print(f"üç∑ Vinos utilizados: {len(df)}")
        print(f"üìä Caracter√≠sticas: {len(self.caracteristicas)}")
        print(f"üè∑Ô∏è Clases de calidad: {len(self.clases_calidad)}")
        
        return True


def main():
    """Funci√≥n principal para entrenar el modelo"""
    # Archivo con datos completos
    archivo_datos = "datos_scraping/resumen_scraping_completo_20250716_130237.csv"
    
    # Verificar que existe el archivo
    if not os.path.exists(archivo_datos):
        print(f"‚ùå No se encuentra el archivo: {archivo_datos}")
        return False
    
    # Crear y entrenar modelo
    modelo_completo = ModeloVinoCompleto()
    exito = modelo_completo.entrenar_modelo_completo(archivo_datos)
    
    if exito:
        print("\nüéâ MODELO ENTRENADO EXITOSAMENTE")
        print("üìÅ Archivos del modelo guardados en carpeta 'static'")
        print("üöÄ El modelo est√° listo para ser usado en la aplicaci√≥n")
    else:
        print("\n‚ùå ERROR EN EL ENTRENAMIENTO")
    
    return exito


if __name__ == "__main__":
    main()
