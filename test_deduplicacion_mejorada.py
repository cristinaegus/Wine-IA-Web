#!/usr/bin/env python3
"""
Script para probar la nueva funci√≥n de deduplicaci√≥n mejorada
"""

import sys
import os

# Configurar path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Simular la funci√≥n directamente para probar
import pandas as pd
from config_sommelier import get_config

def test_deduplicacion_mejorada():
    """
    Prueba m√∫ltiples b√∫squedas para verificar que no se dupliquen vinos
    """
    print("üß™ PROBANDO DEDUPLICACI√ìN MEJORADA")
    print("=" * 50)
    
    config = get_config('development')
    
    if not config.LATEST_CSV:
        print("‚ùå No se encontr√≥ archivo de datos")
        return
    
    # Importar la funci√≥n desde app_sommelier
    try:
        from app_sommelier import buscar_vinos_similares
        print("‚úÖ Funci√≥n importada correctamente")
    except ImportError as e:
        print(f"‚ùå Error importando funci√≥n: {e}")
        return
    
    # Realizar m√∫ltiples b√∫squedas con los mismos par√°metros
    print("\nüîç PRUEBA 1: Mismos par√°metros m√∫ltiples veces")
    
    parametros = [20, 35, 4.1]  # precio_min, precio_max, rating_min
    
    for i in range(3):
        print(f"\n--- B√∫squeda #{i+1} ---")
        vinos = buscar_vinos_similares(*parametros)
        
        nombres = [vino['nombre_limpio'] for vino in vinos]
        bodegas = [vino['bodega'] for vino in vinos]
        
        print(f"Vinos encontrados: {len(vinos)}")
        print(f"Nombres √∫nicos: {len(set(nombres))} de {len(nombres)}")
        print(f"Bodegas √∫nicas: {len(set(bodegas))} de {len(bodegas)}")
        
        # Mostrar los vinos
        for j, vino in enumerate(vinos, 1):
            print(f"  {j}. {vino['nombre_limpio']} - {vino['bodega']} ({vino['a√±o']})")
        
        # Verificar duplicados
        if len(set(nombres)) < len(nombres):
            print("‚ùå DUPLICADOS DETECTADOS EN NOMBRES")
        else:
            print("‚úÖ Sin duplicados en nombres")
        
        if len(set(bodegas)) < len(bodegas):
            print("‚ö†Ô∏è Algunas bodegas repetidas (puede ser normal)")
        else:
            print("‚úÖ Sin duplicados en bodegas")
    
    # Probar con diferentes par√°metros
    print("\nüîç PRUEBA 2: Diferentes rangos de precio")
    
    rangos_prueba = [
        [15, 30, 4.0],
        [25, 50, 4.1],
        [10, 25, 4.2]
    ]
    
    for i, (precio_min, precio_max, rating_min) in enumerate(rangos_prueba):
        print(f"\n--- Rango #{i+1}: ‚Ç¨{precio_min}-{precio_max}, rating ‚â•{rating_min} ---")
        vinos = buscar_vinos_similares(precio_min, precio_max, rating_min)
        
        if vinos:
            nombres = [vino['nombre_limpio'] for vino in vinos]
            print(f"Vinos: {len(vinos)}, √önicos: {len(set(nombres))}")
            
            if len(set(nombres)) == len(nombres):
                print("‚úÖ Deduplicaci√≥n correcta")
            else:
                print("‚ùå Duplicados encontrados")
        else:
            print("‚ö†Ô∏è No se encontraron vinos")
    
    print("\nüéâ PRUEBAS COMPLETADAS")

if __name__ == "__main__":
    test_deduplicacion_mejorada()
